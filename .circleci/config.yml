version: 2.1

commands:
  install_awscli:
    description: install AWS CLI
    steps:
      - run: 
          name: aws cli installation
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: install ansible
    steps: 
      - run: 
          name: install ansible
          command: |
            sudo apt update 
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y


  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
       
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
             aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
             aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
             aws s3 rm "s3://udapeople-<< parameters.workflow_id >>" --recursive


  revert-migrations:
    description: Revert the last migration
    parameters:
        workflow_id:
            type: string      
    steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
              SUCCESS=$(curl --insecure  https://kvdb.io/${kvdb_bucket}/migration_<< parameters.workflow_id >>)
              # Logic for reverting the database state
              if (( $SUCCESS == 1 ));
              then
                  cd ~/project/backend
                  npm install
                  npm run migration:revert
              fi  
  install_NodeJS:
    description: install nodeJS
    steps:
        - run:
            name: install nodejs
            command: |
              curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
              sudo apt install -y nodejs





  

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd  backend
            npm install
            npm run build
            ##
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: "frontend-build"
        - run:
            name: front-end test
            command: |
              cd  frontend
              npm install
              npm run test
                  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: "backend-build"
      - run:
          name: back-end test
          command: |
            cd  backend
            npm install
            npm run test
    
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: "frontend-build"
      - run:
          name: front-end test
          command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              
              # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
              npm audit fix --audit-level=critical --force
              npm audit  --audit-level=critical 

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: "backend-build"
      - run:
          name: back-end test
          command: |

              cd backend
              # npm update path-parse --depth 3
              npm install   
              npm audit fix --audit-level=critical --force
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical
              
  deploy-infrastructure:
    docker:
     - image: cimg/base:stable

    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
               --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> .circleci/ansible/inventory.txt
      - run:
          name: inventory debug
          command: |
            cat .circleci/ansible/inventory.txt
  
            
      - persist_to_workspace:
          root: ~/
          paths: 
            - project/.circleci/ansible/inventory.txt

      - run:
          name: debug inv
          command: |
              cat .circleci/ansible/inventory.txt
      
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["b5:87:4f:44:2b:ec:10:57:10:9f:3a:15:9a:32:4f:79"]
      - attach_workspace:
          at: ~/
      
      - run:
          name: configure server
          command: |
             cd .circleci/ansible
             cat inventory.txt
             ansible-playbook -i inventory.txt configure-server.yml

              
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:14.20
    steps:
      - checkout
      - install_awscli
      - run:
          name: Run migrations
          command: |
              cd backend
              npm install
              # Run and save the migration output
              npm run migrations > migrations_dump.txt
              #
      - run:
          name: Send migration results to KVDP
          command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
          
                curl https://kvdb.io/${kvdb_bucket}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
     # Here's where you will add some code to rollback on failure    
      - destroy-environment
      - revert-migrations



             
  deploy-frontend:
    docker:
      - image: cimg/base:stable 
    steps:
      - checkout
      - install_awscli
      - install_NodeJS
      - restore_cache:
          keys: "frontend-build"
      - run:
         name: Install tar utility
         command: |
            yum install -y tar gzip
      # - attach_workspace:
      #     at: /tmp/workspace
      - run:
          name: Install dependencies
          command: |
            yum install -y python3 
            curl –sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs 


      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=54.163.47.22
            export API_URL="http://BACKEND_IP}:3030"
            echo "API_URL = API_URL}"
            echo API_URL="http://BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
              cd frontend
              npm install
              npm run build
              tar -czvf artifact-"CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
              aws s3 cp dist s3://udapeople-dce1286 --recursive

  deploy-backend:
    docker:
      - image: cimg/python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["b5:87:4f:44:2b:ec:10:57:10:9f:3a:15:9a:32:4f:79"]
      # attach workspace
      - run:
          name: Install tar utility & node
          command: |
             sudo apt-get update
             sudo apt-get install curl
             curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -
             sudo apt-get install nodejs

      - run:
          name: Install dependencies
          command: |
              pip   install --upgrade pip
              pip install ansible
      - run:
          name: Deploy backend
          command: |
            # cd backend
            # npm i
            # npm run build
            # cd ..
            # pwd
            # # Zip the directory
            # tar -C backend -czvf artifact.tar.gz .
            # mkdir .circleci/ansible/roles/deploy/files
            # cp artifact.tar.gz .circleci/ansible/roles/deploy/files/
            # # cd .circleci/ansible
            # # echo "Contents  of the inventory.txt file is -------"
            # # cat inventory.txt
            echo "[web]" >> inventory.txt
            echo "34.229.138.4" >> inventory.txt
            ansible-playbook -i inventory.txt .circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
   
   

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      # - deploy-backend