version: 2.1

commands:
  install_awscli:
    description: install AWS CLI
    steps:
      - run: 
          name: aws cli installation
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: install ansible
    steps: 
      - run: 
          name: install ansible
          command: |
            sudo apt update 
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
 
  install_terraform:
    description: install terraform
    steps: 
      - run: 
          name: install terraform
          command: |
            sudo apt install unzip
            wget https://releases.hashicorp.com/terraform/1.5.1/terraform_1.5.1_linux_amd64.zip
            unzip terraform_1.5.1_linux_amd64.zip
            sudo mv terraform /usr/local/bin/
            terraform -version


  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
       
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
             terraform destroy
             aws s3 rm "s3://udapeople-<< parameters.workflow_id >>" --recursive


  revert-migrations:
    description: Revert the last migration
    parameters:
        workflow_id:
            type: string      
            default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
              SUCCESS=$(curl --insecure  https://kvdb.io/${kvdb_bucket}/migration_<< parameters.workflow_id >>)
              # Logic for reverting the database state
              if (( $SUCCESS == 1 ));
              then
                  cd ~/project/backend
                  npm install
                  npm run migration:revert
              fi  
  install_nodejs:
    description: install nodeJS
    steps:
        - run:
            name: install nodejs
            command: |
              curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
              sudo apt install -y nodejs
              sudo npm install --global n
              sudo n 13.8.0 




  

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd  backend
        
            npm install
            npm run build
            ##
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: "frontend-build"
        - run:
            name: front-end test
            command: |
              cd  frontend
              npm install
              npm run test
                  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: "backend-build"
      - run:
          name: back-end test
          command: |
            cd  backend
            npm install
            npm run test
    
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: "frontend-build"
      - run:
          name: front-end test
          command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              
              # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
              npm audit fix --audit-level=critical --force
              npm audit  --audit-level=critical 

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: "backend-build"
      - run:
          name: back-end test
          command: |

              cd backend
              # npm update path-parse --depth 3
              npm install   
              npm audit fix --audit-level=critical --force
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical
              
  deploy-infrastructure:
    docker:
     - image: cimg/base:stable

    steps:
      - checkout
      - install_awscli
      - install_terraform
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            # export AWS_ACCESS_KEY_ID="AKIASHQLY3AONUDL33UJ"
            # export AWS_SECRET_ACCESS_KEY="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"
            cd .circleci/files
            sudo terraform init
            # export TF_VAR_access_key=${AWS_ACCESS_KEY_ID}
            # export TF_VAR_secret_key=${AWS_SECRET_ACCESS_KEY}
            terraform plan -var "id=${CIRCLE_WORKFLOW_ID:0:7}" -var "access_key=${AWS_ACCESS_KEY_ID}" -var "secret_key=${AWS_SECRET_ACCESS_KEY}"
            terraform apply -auto-approve -var "id=${CIRCLE_WORKFLOW_ID:0:7}" -var "access_key=${AWS_ACCESS_KEY_ID}" -var "secret_key=${AWS_SECRET_ACCESS_KEY}"
            
            # aws cloudformation deploy \
            # --template-file .circleci/files/backend.yml \
            # --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            # --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            # --tags project=udapeople
      # - run: 
      #     name: Ensure front-end infrastructure exist
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/frontend.yml \
      #          --tags project=udapeople \
      #         --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> .circleci/ansible/inventory.txt
      - run:
          name: inventory debug
          command: |
            cat .circleci/ansible/inventory.txt
  
            
      - persist_to_workspace:
          root: ~/
          paths: 
            - project/.circleci/ansible/inventory.txt

      - run:
          name: debug inv
          command: |
              cat .circleci/ansible/inventory.txt
      
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["80:06:1e:65:27:6a:c4:ba:ca:24:e3:6f:83:f1:c5:59"]
      - attach_workspace:
          at: ~/
      
      - run:
          name: configure server
          command: |
             cd .circleci/ansible
             cat inventory.txt
             ansible-playbook -i inventory.txt configure-server.yml

              
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - run:
          name: Run migrations
          command: |
              cd backend
              npm install
              npm build
              # Run and save the migration output
              npm run migrations > migrations_dump.txt

              cat migrations_dump.txt
          
              
      - run:
          name: Send migration results to KVDP
          command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
          
                curl https://kvdb.io/${kvdb_bucket}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
     # Here's where you will add some code to rollback on failure    
      - destroy-environment
      - revert-migrations



             
  deploy-frontend:
    docker:
      - image: cimg/base:stable 
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: "frontend-build"


      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
              export NODE_ENV=production
              cd frontend
              npm install
              npm run build
              tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
              aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environment
      - revert-migrations
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - install_ansible
      - restore_cache:
          keys: "backend-build"
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["b5:87:4f:44:2b:ec:10:57:10:9f:3a:15:9a:32:4f:79"]

      - run:
          name: Package backend
          command: |
            # export NODE_ENV=production
            cd backend
            npm i
            npm run build
            # cd ..
            # pwd
            # # Zip the directory
            tar -czf artifact.tar.gz dist/* package*
            cd .. 
 
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
            # # cd .circleci/ansible
            # # echo "Contents  of the inventory.txt file is -------"
      - run:
          name: deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=/home/ubuntu/app/dist/migrations
            export TYPEORM_ENTITIES=/home/ubuntu/app/dist/modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=/home/ubuntu/app/dist/migrations/*{.ts,.js}
            export NODE_ENV=production

            cd .circleci/ansible/
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
           
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations   

  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      - run:
          name: Get backend url & backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            # export BACKEND_IP=54.209.166.129
            export API_URL=${BACKEND_IP}
            
            echo "${API_URL}"
  
            # echo "$API_URL/api/status"
            if curl -s http://$API_URL:3030/api/status | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                  # Change this to 0 after the job fails
                exit 0
              else
                exit 1
              fi
      # - destroy-environment
      # - revert-migrations   

  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
    
      - run:
          name: save old workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            #save in kvdb
            curl https://kvdb.io/${kvdb_bucket}/OldWorkflowID -d "${OldWorkflowID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople
      # Here's where you will add some code to rollback on failure  

      - destroy-environment
      - revert-migrations   
      
  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Remove old stacks and files
          command: |
            # Fetch the Old workflow ID
            # export OldWorkflowID=$(aws cloudformation \
            #         list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            #         --no-paginate --output text)
            # echo OldWorkflowID: "${OldWorkflowID}"
            # echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                   --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}" 
            export OldWorkflowID=$(curl --insecure  https://kvdb.io/${kvdb_bucket}/OldWorkflowID)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            export STACKS=[] #put the list of stacks here

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [main]
      - configure-infrastructure:
          # requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]

      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]